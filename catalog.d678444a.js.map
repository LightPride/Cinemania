{"mappings":"AAAA,MAAMA,EAAO,CACXC,YAAaC,SAASC,cAAc,gBACpCC,eAAgBF,SAASC,cAAc,uBAGnCF,YAAEI,EAAWD,eAAEE,GAAmBN,EAExC,IAAIO,EAAO,EAwBX,SAASC,IACPC,IAAmBC,MAAKC,IAmE1B,IAAiCC,KAlELL,EAqEnBM,MACL,iHAA2FD,KAC3FF,MAAKI,IACL,IAAKA,EAAUC,GACb,MAAM,IAAIC,MAAMF,EAAUG,QAG5B,OAAOH,EAAUI,MAAM,KA5EOR,MAAKS,MAAMC,IACvC,MAEMC,EAFSD,EAAKE,QAAQC,MAAM,EAAG,IAEZC,KAAIC,IAC3B,MAAMC,EAAQD,EAAMC,MACdC,EAAa,kCAAkCF,EAAMG,cACrDC,EAAcJ,EAAMK,aAAaC,UAAU,EAAG,GAC9CC,EAAUP,EAAMQ,GAChBC,EAAST,EAAMU,aASrB,MAAO,C,MACLT,E,WACAC,E,YAVkBhB,EAAOA,OACxByB,QAAOC,IACN,GAAIZ,EAAMa,UAAUC,SAASF,EAAMJ,IACjC,OAAOI,CAAK,IAGfb,KAAIa,GAASA,EAAMG,O,YAMpBX,E,OACAK,E,QACAF,EACD,IAGH1B,EAAemC,gBAAkBC,EAAcrB,EAAU,GACzD,G,CAmEN,SAASZ,IAIP,OAAOI,MAAM,0FAAkCH,MAAKI,IAClD,IAAKA,EAAUC,GACb,MAAM,IAAIC,MAAMF,EAAUG,QAG5B,OAAOH,EAAUI,MAAM,G,CAI3B,SAASwB,EAAcC,GAuBrB,OAtBsBA,EACnBnB,KAAI,EAACE,MAAEA,EAAKC,WAAEA,EAAUiB,YAAEA,EAAWf,YAAEA,EAAWK,OAAEA,EAAMF,QAAEA,KAG1C,8CACoBA,gJAEnCL,iBAA0BK,+DAEeA,+BACxBA,MAAYN,iCACbM,qBAA2BA,MAT9BY,EAAY,8BASgEZ,MAAYH,oFAG1DG,MAAYE,oCAM1DW,KAAK,G,CAzJVxC,EAAYyC,iBAAiB,UAK7B,SAAkBC,GAChBA,EAAEC,iBACFC,WAAa,GACb1C,EAAO,EAEP,MAAM2C,cAAEA,GAAkBH,EAAEI,cAI5B,GAFAF,WAAaC,EAAcE,MAER,KAAfH,WAEF,YADAzC,IA0CFC,IAAmBC,MAAKC,IA+C1B,IAAkC6B,EAAMa,GAANb,EA9CLS,WA8CWI,EA9CC9C,EAkDhCM,MACL,0GAAsDwC,WAAcb,KACpE9B,MAAKI,IACL,IAAKA,EAAUC,GACb,MAAM,IAAIC,MAAMF,EAAUG,QAG5B,OAAOH,EAAUI,MAAM,KAzDoBR,MAAKS,MAAMC,IACpD,MAEMC,EAFSD,EAAKE,QAAQC,MAAM,EAAG,IAEZC,KAAIC,IAC3B,MAAMC,EAAQD,EAAMC,MACdC,EAAa,kCAAkCF,EAAMG,cACrDC,EAAcJ,EAAMK,aAAaC,UAAU,EAAG,GAC9CC,EAAUP,EAAMQ,GAChBC,EAAST,EAAMU,aASrB,MAAO,C,MACLT,E,WACAC,E,YAVkBhB,EAAOA,OACxByB,QAAOC,IACN,GAAIZ,EAAMa,UAAUC,SAASF,EAAMJ,IACjC,OAAOI,CAAK,IAGfb,KAAIa,GAASA,EAAMG,O,YAMpBX,E,OACAK,E,QACAF,EACD,IAGH1B,EAAemC,gBAAkBC,EAAcrB,EAAU,GACzD,G,IArFNf,EAAewC,iBAAiB,SA6JhC,SAA+BC,GAC7B,GAA0B,OAAtBA,EAAEO,OAAOC,SACX,OAGF,MAAMC,EAAaT,EAAEO,OAErBG,aAAaC,QAAQ,UAAW,GAAGF,EAAWG,QAAQ1B,K,IAlKxDzB","sources":["src/js/catalog-search.js"],"sourcesContent":["const refs = {\n  catalogForm: document.querySelector('#search-form'),\n  catalogGallery: document.querySelector('.catalog__gallery'),\n};\n\nconst { catalogForm, catalogGallery } = refs;\n\nlet page = 1;\n\ncatalogForm.addEventListener('submit', onSubmit);\ncatalogGallery.addEventListener('click', onCatalogGalleryClick);\n\nonCatalogLoad();\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  inputValue = '';\n  page = 1;\n\n  const { catalogSearch } = e.currentTarget;\n\n  inputValue = catalogSearch.value;\n\n  if (inputValue === '') {\n    onCatalogLoad();\n    return;\n  }\n\n  onCatalogFormSubmit();\n}\n\nfunction onCatalogLoad() {\n  fetchMovieGenres().then(genres => {\n    fetchCatalogTrendMovies(page).then(async data => {\n      const movies = data.results.slice(0, 10);\n\n      const cardsData = movies.map(movie => {\n        const title = movie.title;\n        const posterPath = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        const releaseYear = movie.release_date.substring(0, 4);\n        const movieId = movie.id;\n        const rating = movie.vote_average;\n        const movieGenres = genres.genres\n          .filter(genre => {\n            if (movie.genre_ids.includes(genre.id)) {\n              return genre;\n            }\n          })\n          .map(genre => genre.name);\n\n        return {\n          title,\n          posterPath,\n          movieGenres,\n          releaseYear,\n          rating,\n          movieId,\n        };\n      });\n\n      catalogGallery.innerHTML = await createGallery(cardsData);\n    });\n  });\n}\n\nfunction onCatalogFormSubmit() {\n  fetchMovieGenres().then(genres => {\n    fetchCatalogSearchMovies(inputValue, page).then(async data => {\n      const movies = data.results.slice(0, 10);\n\n      const cardsData = movies.map(movie => {\n        const title = movie.title;\n        const posterPath = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        const releaseYear = movie.release_date.substring(0, 4);\n        const movieId = movie.id;\n        const rating = movie.vote_average;\n        const movieGenres = genres.genres\n          .filter(genre => {\n            if (movie.genre_ids.includes(genre.id)) {\n              return genre;\n            }\n          })\n          .map(genre => genre.name);\n\n        return {\n          title,\n          posterPath,\n          movieGenres,\n          releaseYear,\n          rating,\n          movieId,\n        };\n      });\n\n      catalogGallery.innerHTML = await createGallery(cardsData);\n    });\n  });\n}\n\nfunction fetchCatalogTrendMovies(page) {\n  const API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`\n  ).then(movieData => {\n    if (!movieData.ok) {\n      throw new Error(movieData.status);\n    }\n\n    return movieData.json();\n  });\n}\n\nfunction fetchCatalogSearchMovies(name, page) {\n  const API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n  const BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n\n  return fetch(\n    `${BASE_URL}?api_key=${API_KEY}&language=en-US&page=${page}&query=${name}`\n  ).then(movieData => {\n    if (!movieData.ok) {\n      throw new Error(movieData.status);\n    }\n\n    return movieData.json();\n  });\n}\n\nfunction fetchMovieGenres() {\n  const API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n  const BASE_URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n  return fetch(`${BASE_URL}?api_key=${API_KEY}`).then(movieData => {\n    if (!movieData.ok) {\n      throw new Error(movieData.status);\n    }\n\n    return movieData.json();\n  });\n}\n\nfunction createGallery(movies) {\n  const generatedHtml = movies\n    .map(({ title, posterPath, movieGenres, releaseYear, rating, movieId }) => {\n      const genres = movieGenres[0];\n\n      const htmlPart = `\n        <li class=\"movie__card\" data-id=\"${movieId}\">\n        <div class=\"movie__card-poster\" style=\"background-image: linear-gradient(rgba(0,0,0,0),rgba(0, 0, 0, 0), rgba(0,0,0,1)),\n  url(${posterPath});\" data-id=\"${movieId}\"></div>\n\n        <div class=\"movie__card-info\" data-id=\"${movieId}\">\n          <h3 data-id=\"${movieId}\">${title}</h3>\n          <p data-id=\"${movieId}\"><span data-id=\"${movieId}\">${genres}</span> | <span data-id=\"${movieId}\">${releaseYear}</span></p>\n        </div>\n\n        <div class=\"movie__card-rating\" data-id=\"${movieId}\">${rating}</div>\n      </li> \n        `;\n\n      return htmlPart;\n    })\n    .join('');\n\n  return generatedHtml;\n}\n\nfunction onCatalogGalleryClick(e) {\n  if (e.target.nodeName === 'UL') {\n    return;\n  }\n\n  const targetCard = e.target;\n\n  localStorage.setItem('film-id', `${targetCard.dataset.id}`);\n}\n"],"names":["$263db3299b551903$var$refs","catalogForm","document","querySelector","catalogGallery","$263db3299b551903$var$catalogForm","$263db3299b551903$var$catalogGallery","$263db3299b551903$var$page","$263db3299b551903$var$onCatalogLoad","$263db3299b551903$var$fetchMovieGenres","then","genres","page1","fetch","movieData","ok","Error","status","json","async","data","cardsData","results","slice","map","movie","title","posterPath","poster_path","releaseYear","release_date","substring","movieId","id","rating","vote_average","filter","genre","genre_ids","includes","name","innerHTML","$263db3299b551903$var$createGallery","movies","movieGenres","join","addEventListener","e","preventDefault","inputValue","catalogSearch","currentTarget","value","page2","target","nodeName","targetCard","localStorage","setItem","dataset"],"version":3,"file":"catalog.d678444a.js.map"}