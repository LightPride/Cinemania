{"mappings":"AAAkBA,SAASC,cAAc,0BAkBzC,SAASC,KAdTC,iBACI,IACI,MAAMC,QAAiBC,MAAM,mHAC7B,IAAKD,EAASE,GACV,MAAM,IAAIC,MAAMH,EAASI,QAG7B,aADwBJ,EAASK,QAChBC,O,CACnB,MAAOC,GACLC,QAAQC,IAAIF,E,GAMhBG,GAAoBC,MAAKC,IACrB,IAAIC,EAEAC,OAAOC,WAAW,sBAAsBC,QAExCH,EAAQ,EACDC,OAAOC,WAAW,uBAAuBC,UAEhDH,EAAQ,GAUpBd,eAA4Ba,EAAQC,GAChC,MAAMI,EAAYrB,SAASsB,eAAe,oBAC1CD,EAAUE,UAAY,GAEtBP,EAAOQ,MAAM,EAAGP,GAAOQ,SAAQtB,MAAMuB,IACjC,MAAMC,QA4BdxB,eAA6ByB,GACzB,MAAMC,EAAU,mCACVC,EAAW,gDAEX1B,QAAiBC,MAAM,GAAGyB,aAAoBD,oBAC9CE,QAAa3B,EAASK,OAEtBuB,EAAaJ,EAASK,KAAKC,IAC7B,MAAMC,EAAQJ,EAAKJ,OAAOS,MAAMC,GAAUA,EAAMC,KAAOJ,IACvD,OAAOC,EAAMI,IAAI,IAGrB,OAAOP,EAAWQ,KAAK,K,CAxCEC,CAAcf,EAAMgB,WACnCC,EAAK3C,SAAS4C,cAAc,MAC5BC,EAAY7C,SAAS4C,cAAc,OACnCE,EAAQ9C,SAAS4C,cAAc,MAC/BG,EAAM/C,SAAS4C,cAAc,OAC7BI,EAAShD,SAAS4C,cAAc,QAChCK,EAAcjD,SAAS4C,cAAc,QACrCP,EAAQrC,SAAS4C,cAAc,QAErCE,EAAMI,UAAY,GAAGxB,EAAMoB,QAC3BT,EAAMa,UAAY,GAAGvB,IACrBsB,EAAYC,UAAY,GAAGxB,EAAMyB,aAAa3B,MAAM,EAAG,KACvDwB,EAAOE,UAAY,GAAGxB,EAAM0B,aAAaC,QAAQ,KACjDN,EAAIO,IAAM,kCAAkC5B,EAAM6B,cAClDR,EAAIS,IAAM,GAAG9B,EAAMoB,qBAEnBD,EAAUY,YAAYX,GACtBD,EAAUY,YAAYpB,GACtBQ,EAAUY,YAAYR,GAEtBN,EAAGc,YAAYV,GACfJ,EAAGc,YAAYZ,GACfF,EAAGc,YAAYT,GACf3B,EAAUoC,YAAYd,EAAG,G,CAnCzBe,CAAa1C,EAAQC,EAAM,IAC5B0C,OAAMhD,GAASC,QAAQC,IAAIF,I,CAIlCT,IAkDAgB,OAAO0C,iBAAiB,UAAU,KAC9B1D,GAAkB","sources":["src/js/home-trends.js"],"sourcesContent":["const container = document.querySelector('.weekly-trends__insert');\nconst API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\nasync function fetchTrendsMovies() {\n    try {\n        const response = await fetch(`${BASE_URL}?api_key=${API_KEY}&language=en-US&page=1`);\n        if (!response.ok) {\n            throw new Error(response.status);\n        }\n        const movieData = await response.json();\n        return movieData.results;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nfunction getFetchedMovies() {\n    fetchTrendsMovies().then(movies => {\n        let count;\n\n        if (window.matchMedia('(max-width: 767px)').matches) {\n            // mobile\n            count = 1;\n        } else if (window.matchMedia('(max-width: 1023px)').matches) {\n            // desktop\n            count = 3;\n        }\n\n        renderMovies(movies, count);\n    }).catch(error => console.log(error));\n}\n\n\ngetFetchedMovies();\n\nasync function renderMovies(movies, count) {\n    const container = document.getElementById('movies-container');\n    container.innerHTML = '';\n\n    movies.slice(0, count).forEach(async movie => {\n        const genres = await getGenresById(movie.genre_ids);\n        const li = document.createElement('li');\n        const movieInfo = document.createElement('div');\n        const title = document.createElement('h3');\n        const img = document.createElement('img');\n        const rating = document.createElement('span');\n        const releaseDate = document.createElement('span');\n        const genre = document.createElement('span');\n\n        title.innerText = `${movie.title}`;\n        genre.innerText = `${genres}`;\n        releaseDate.innerText = `${movie.release_date.slice(0, 4)}`;\n        rating.innerText = `${movie.vote_average.toFixed(1)}`;\n        img.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        img.alt = `${movie.title} movie poster`;\n\n        movieInfo.appendChild(title);\n        movieInfo.appendChild(genre);\n        movieInfo.appendChild(releaseDate);\n\n        li.appendChild(img);\n        li.appendChild(movieInfo);\n        li.appendChild(rating);\n        container.appendChild(li);\n    });\n}\n\n\nasync function getGenresById(genreIds) {\n    const API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n    const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list`;\n\n    const response = await fetch(`${BASE_URL}?api_key=${API_KEY}&language=en-US`);\n    const data = await response.json();\n\n    const genreNames = genreIds.map((genreId) => {\n        const genre = data.genres.find((genre) => genre.id === genreId);\n        return genre.name;\n    });\n\n    return genreNames.join(', ');\n}\n\nwindow.addEventListener('resize', () => {\n    getFetchedMovies();\n});\n\n\n\n\n\n"],"names":["document","querySelector","$d3fe7bef80e36203$var$getFetchedMovies","async","response","fetch","ok","Error","status","json","results","error","console","log","$d3fe7bef80e36203$var$fetchTrendsMovies","then","movies","count","window","matchMedia","matches","container1","getElementById","innerHTML","slice","forEach","movie","genres","genreIds","API_KEY1","BASE_URL1","data","genreNames","map","genreId","genre1","find","genre","id","name","join","$d3fe7bef80e36203$var$getGenresById","genre_ids","li","createElement","movieInfo","title","img","rating","releaseDate","innerText","release_date","vote_average","toFixed","src","poster_path","alt","appendChild","$d3fe7bef80e36203$var$renderMovies","catch","addEventListener"],"version":3,"file":"index.e4beae7d.js.map"}