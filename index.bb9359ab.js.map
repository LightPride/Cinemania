{"mappings":"AAAA,MAAMA,EAAYC,SAASC,eAAe,oBAqB1CC,eAAeC,EAAaC,EAAQC,GAChCN,EAAUO,UAAY,GACtB,MAAMC,EAAkBP,SAASQ,cAAc,MAC/CD,EAAgBE,GAAK,mBACrBF,EAAgBG,UAAUC,IAAI,cAAe,SAAU,aACvDZ,EAAUa,YAAYL,GAEtBH,EAAOS,MAAM,EAAGR,GAAOS,SAAQZ,MAAOa,IAClC,MAAMC,QAgDdd,eAA6Be,GACzB,MAAMC,EAAU,mCACVC,EAAW,gDAEXC,QAAiBC,MAAM,GAAGF,aAAoBD,oBAC9CI,QAAaF,EAASG,OAO5B,OALmBN,EAASO,KAAKC,GACfH,EAAKN,OAAOU,MAAMC,GAAUA,EAAMlB,KAAOgB,IAC1CG,OAGCC,KAAK,K,CA5DEC,CAAcf,EAAMgB,WACnCC,EAAKhC,SAASQ,cAAc,MAClCwB,EAAGtB,UAAUC,IAAI,eAEjB,MAAMsB,EAAejC,SAASQ,cAAc,OAC5CyB,EAAavB,UAAUC,IAAI,kBAE3B,MAAMuB,EAAiBnB,EAAMoB,MAAMtB,MAAM,EAAGE,EAAMoB,MAAMC,QAAQ,MAC1DD,EAAQnC,SAASQ,cAAc,MACrC2B,EAAMzB,UAAUC,IAAI,sBACpBwB,EAAME,UAAY,GAAGH,IAErB,MAAMI,EAAsBtC,SAASQ,cAAc,QACnD8B,EAAoB5B,UAAUC,IAAI,6BAClC2B,EAAoBD,UAAY,GAAGrB,EAAOuB,MAAM,KAAK1B,MAAM,EAAG,GAAGgB,KAAK,WAAWd,EAAMyB,aAAa3B,MAAM,EAAG,KAE7G,MAAM4B,EAAczC,SAASQ,cAAc,OAC3CiC,EAAY/B,UAAUC,IAAI,iBAC1B,MAAM+B,EAAc1C,SAASQ,cAAc,QAC3CkC,EAAYL,UAAY,GAAGtB,EAAM4B,aAAaC,QAAQ,KACtDH,EAAY7B,YAAY8B,GAExB,MAAMG,EAAS7C,SAASQ,cAAc,OACtCqC,EAAOC,IAAM,kCAAkC/B,EAAMgC,cACrDF,EAAOG,IAAM,GAAGjC,EAAMoB,qBACtBU,EAAOnC,UAAUC,IAAI,cAErBsB,EAAarB,YAAYuB,GACzBF,EAAarB,YAAY0B,GAEzBN,EAAGpB,YAAYqB,GACfD,EAAGpB,YAAY6B,GACfT,EAAGpB,YAAYiC,GAEftC,EAAgBK,YAAYoB,EAAG,IAG/BiB,OAAOC,WA/DgB,MAgEvB3C,EAAgB4C,MAAMC,IAAM,I,CAyBpClD,eAAemD,IACX,IAAIhD,EAEAA,EADA4C,OAAOC,WA3FgB,IA4Ff,EAEA,EAGZ/C,QA5FJD,iBACI,IACI,MAAMkB,QAAiBC,MAAM,mHAC7B,IAAKD,EAASkC,GACV,MAAM,IAAIC,MAAMnC,EAASoC,QAG7B,aADwBpC,EAASG,QAChBkC,O,CACnB,MAAOC,GACLC,QAAQC,IAAIF,E,EAkFKG,GACAxD,E,CAGzBgD,IAEAJ,OAAOa,iBAAiB,UAAU,KAC9BT,GAAkB","sources":["src/js/home-trends.js"],"sourcesContent":["const container = document.getElementById('movies-container');\nconst API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\nconst TABLET_WIDTH_THRESHOLD = 768;\nconst colWidthClass = 'col-md-4';\n\n\n\nasync function fetchTrendsMovies() {\n    try {\n        const response = await fetch(`${BASE_URL}?api_key=${API_KEY}&language=en-US&page=1`);\n        if (!response.ok) {\n            throw new Error(response.status);\n        }\n        const movieData = await response.json();\n        return movieData.results;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function renderMovies(movies, count) {\n    container.innerHTML = '';\n    const moviesContainer = document.createElement('ul');\n    moviesContainer.id = 'movies-container';\n    moviesContainer.classList.add('weekly-list', 'd-flex', 'flex-wrap');\n    container.appendChild(moviesContainer);\n\n    movies.slice(0, count).forEach(async (movie) => {\n        const genres = await getGenresById(movie.genre_ids);\n        const li = document.createElement('li');\n        li.classList.add('weekly-item');\n\n        const movieDetails = document.createElement('div');\n        movieDetails.classList.add('weekly-wrapper');\n\n        const shortenedTitle = movie.title.slice(0, movie.title.indexOf(':'));\n        const title = document.createElement('h3');\n        title.classList.add('weekly-info__title');\n        title.innerText = `${shortenedTitle}`;\n\n        const releaseDateAndGenre = document.createElement('span');\n        releaseDateAndGenre.classList.add('weekly-info__genres__data');\n        releaseDateAndGenre.innerText = `${genres.split(',').slice(0, 2).join(', ')} | ${movie.release_date.slice(0, 4)}`;\n\n        const movieRating = document.createElement('div');\n        movieRating.classList.add('weekly-rating');\n        const ratingValue = document.createElement('span');\n        ratingValue.innerText = `${movie.vote_average.toFixed(1)}`;\n        movieRating.appendChild(ratingValue);\n\n        const poster = document.createElement('img');\n        poster.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        poster.alt = `${movie.title} movie poster`;\n        poster.classList.add('weekly-img');\n\n        movieDetails.appendChild(title);\n        movieDetails.appendChild(releaseDateAndGenre);\n\n        li.appendChild(movieDetails);\n        li.appendChild(movieRating);\n        li.appendChild(poster);\n\n        moviesContainer.appendChild(li);\n    });\n\n    if (window.innerWidth < TABLET_WIDTH_THRESHOLD) {\n        moviesContainer.style.gap = '0';\n    }\n}\n\n\n\n\n\n\n\nasync function getGenresById(genreIds) {\n    const API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n    const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list`;\n\n    const response = await fetch(`${BASE_URL}?api_key=${API_KEY}&language=en-US`);\n    const data = await response.json();\n\n    const genreNames = genreIds.map((genreId) => {\n        const genre = data.genres.find((genre) => genre.id === genreId);\n        return genre.name;\n    });\n\n    return genreNames.join(', ');\n}\n\nasync function getFetchedMovies() {\n    let count;\n    if (window.innerWidth < TABLET_WIDTH_THRESHOLD) {\n        count = 1;\n    } else {\n        count = 3;\n    }\n    const movies = await fetchTrendsMovies();\n    renderMovies(movies, count);\n}\n\ngetFetchedMovies();\n\nwindow.addEventListener('resize', () => {\n    getFetchedMovies()\n});\n"],"names":["$d3fe7bef80e36203$var$container","document","getElementById","async","$d3fe7bef80e36203$var$renderMovies","movies","count","innerHTML","moviesContainer","createElement","id","classList","add","appendChild","slice","forEach","movie","genres","genreIds","API_KEY1","BASE_URL1","response","fetch","data","json","map","genreId","find","genre","name","join","$d3fe7bef80e36203$var$getGenresById","genre_ids","li","movieDetails","shortenedTitle","title","indexOf","innerText","releaseDateAndGenre","split","release_date","movieRating","ratingValue","vote_average","toFixed","poster","src","poster_path","alt","window","innerWidth","style","gap","$d3fe7bef80e36203$var$getFetchedMovies","ok","Error","status","results","error","console","log","$d3fe7bef80e36203$var$fetchTrendsMovies","addEventListener"],"version":3,"file":"index.bb9359ab.js.map"}